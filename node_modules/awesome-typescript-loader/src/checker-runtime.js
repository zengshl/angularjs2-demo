var resolver_1 = require('./resolver');
var path = require('path');
var fs = require('fs');
var colors = require('colors/safe');
require('babel-polyfill');
(function (MessageType) {
    MessageType[MessageType["Init"] = 'init'] = "Init";
    MessageType[MessageType["Compile"] = 'compile'] = "Compile";
})(exports.MessageType || (exports.MessageType = {}));
var MessageType = exports.MessageType;
var env = {};
var ModuleResolutionHost = (function () {
    function ModuleResolutionHost(servicesHost) {
        this.servicesHost = servicesHost;
    }
    ModuleResolutionHost.prototype.fileExists = function (fileName) {
        return this.servicesHost.getScriptSnapshot(fileName) !== undefined;
    };
    ModuleResolutionHost.prototype.readFile = function (fileName) {
        var snapshot = this.servicesHost.getScriptSnapshot(fileName);
        return snapshot && snapshot.getText(0, snapshot.getLength());
    };
    return ModuleResolutionHost;
})();
exports.ModuleResolutionHost = ModuleResolutionHost;
var Host = (function () {
    function Host() {
        this.moduleResolutionHost = new ModuleResolutionHost(this);
        this.resolver = resolver_1.default(env.webpackOptions);
    }
    Host.prototype.normalizePath = function (filePath) {
        return path.normalize(filePath);
    };
    Host.prototype.getScriptFileNames = function () {
        return Object.keys(env.files);
    };
    Host.prototype.getScriptVersion = function (fileName) {
        if (env.files[fileName]) {
            return env.files[fileName].version.toString();
        }
    };
    Host.prototype.getScriptSnapshot = function (fileName) {
        var fileName_ = path.normalize(fileName);
        var file = env.files[fileName_];
        if (!file) {
            try {
                file = {
                    version: 0,
                    text: fs.readFileSync(fileName, { encoding: 'utf8' }).toString()
                };
                if (path.basename(fileName) !== 'package.json') {
                    env.files[fileName_] = file;
                }
            }
            catch (e) {
                return;
            }
        }
        return env.compiler.ScriptSnapshot.fromString(file.text);
    };
    Host.prototype.getCurrentDirectory = function () {
        return process.cwd();
    };
    Host.prototype.getScriptIsOpen = function () {
        return true;
    };
    Host.prototype.getCompilationSettings = function () {
        return env.options;
    };
    Host.prototype.resolveModuleNames = function (moduleNames, containingFile) {
        var resolvedModules = [];
        for (var _i = 0; _i < moduleNames.length; _i++) {
            var moduleName = moduleNames[_i];
            var cached = env.resolutionCache[(containingFile + "::" + moduleName)];
            if (cached) {
                resolvedModules.push(cached);
            }
            else {
                var resolvedFileName = void 0;
                var resolvedModule = void 0;
                try {
                    resolvedFileName = this.resolver.resolveSync(this.normalizePath(path.dirname(containingFile)), moduleName);
                    if (!resolvedFileName.match(/\.tsx?$/)) {
                        resolvedFileName = null;
                    }
                }
                catch (e) {
                    resolvedFileName = null;
                }
                var tsResolved = env.compiler.resolveModuleName(resolvedFileName || moduleName, containingFile, env.options, this.moduleResolutionHost);
                if (tsResolved.resolvedModule) {
                    resolvedModule = tsResolved.resolvedModule;
                }
                else {
                    resolvedModule = {
                        resolvedFileName: resolvedFileName || ''
                    };
                }
                resolvedModules.push(resolvedModule);
            }
        }
        return resolvedModules;
    };
    Host.prototype.getDefaultLibFileName = function (options) {
        return options.target === env.compiler.ScriptTarget.ES6 ?
            env.compilerInfo.lib6.fileName :
            env.compilerInfo.lib5.fileName;
    };
    Host.prototype.log = function (message) {
    };
    return Host;
})();
exports.Host = Host;
function processInit(payload) {
    env.compiler = require(payload.compilerInfo.compilerName);
    env.compilerInfo = payload.compilerInfo;
    env.options = payload.compilerOptions;
    env.webpackOptions = payload.webpackOptions;
    env.host = new Host();
    env.service = env.compiler.createLanguageService(env.host, env.compiler.createDocumentRegistry());
    env.plugins = payload.plugins;
    env.initedPlugins = env.plugins.map(function (plugin) {
        return require(plugin.file)(plugin.options);
    });
}
var DECLARATION_FILE = /\.d\.ts/;
function processCompile(payload) {
    var instanceName = env.options.instanceName || 'default';
    var silent = !!env.options.forkCheckerSilent;
    if (!silent) {
        console.log(colors.cyan("[" + instanceName + "] Checking started in a separate process..."));
    }
    var timeStart = +new Date();
    process.send({
        messageType: 'progress',
        payload: {
            inProgress: true
        }
    });
    env.files = payload.files;
    env.resolutionCache = payload.resolutionCache;
    var program = env.program = env.service.getProgram();
    var allDiagnostics = [];
    if (env.options.skipDeclarationFilesCheck) {
        var sourceFiles = program.getSourceFiles();
        sourceFiles.forEach(function (sourceFile) {
            if (!sourceFile.fileName.match(DECLARATION_FILE)) {
                allDiagnostics = allDiagnostics.concat(env.compiler.getPreEmitDiagnostics(program, sourceFile));
            }
        });
        // FIXME internal API
        allDiagnostics = env.compiler.sortAndDeduplicateDiagnostics(allDiagnostics);
    }
    else {
        allDiagnostics = env.compiler.getPreEmitDiagnostics(program);
    }
    if (allDiagnostics.length) {
        allDiagnostics.forEach(function (diagnostic) {
            var message = env.compiler.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
            if (diagnostic.file) {
                var _a = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start), line = _a.line, character = _a.character;
                console.error("[" + instanceName + "] " + colors.red(diagnostic.file.fileName) + ":" + (line + 1) + ":" + (character + 1) + " \n    " + colors.red(message));
            }
            else {
                console.error(colors.red("[" + instanceName + "] " + message));
            }
        });
    }
    else {
        if (!silent) {
            var timeEnd = +new Date();
            console.log(colors.green("[" + instanceName + "] Ok, " + (timeEnd - timeStart) / 1000 + " sec."));
        }
    }
    env.initedPlugins.forEach(function (plugin) {
        plugin.processProgram(program);
    });
    process.send({
        messageType: 'progress',
        payload: {
            inProgress: false
        }
    });
}
process.on('message', function (msg) {
    switch (msg.messageType) {
        case MessageType.Init:
            processInit(msg.payload);
            break;
        case MessageType.Compile:
            processCompile(msg.payload);
            break;
    }
});
//# sourceMappingURL=checker-runtime.js.map