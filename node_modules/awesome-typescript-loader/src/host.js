"use strict";
var fs = require('fs');
var util = require('util');
var path = require('path');
var deps_1 = require('./deps');
var helpers_1 = require('./helpers');
var promisify = require('es6-promisify');
var objectAssign = require('object-assign');
var RUNTIME = helpers_1.loadLib('../lib/runtime.d.ts');
var ModuleResolutionHost = (function () {
    function ModuleResolutionHost(servicesHost) {
        this.resolutionCache = {};
        this.servicesHost = servicesHost;
    }
    ModuleResolutionHost.prototype.fileExists = function (fileName) {
        return this.servicesHost.getScriptSnapshot(fileName) !== undefined;
    };
    ModuleResolutionHost.prototype.readFile = function (fileName) {
        var snapshot = this.servicesHost.getScriptSnapshot(fileName);
        return snapshot && snapshot.getText(0, snapshot.getLength());
    };
    return ModuleResolutionHost;
}());
exports.ModuleResolutionHost = ModuleResolutionHost;
var Host = (function () {
    function Host(state) {
        this.state = state;
        this.moduleResolutionHost = new ModuleResolutionHost(this);
    }
    Host.prototype.getScriptFileNames = function () {
        return this.state.allFileNames();
    };
    Host.prototype.getScriptVersion = function (fileName) {
        if (this.state.getFile(fileName)) {
            return this.state.getFile(fileName).version.toString();
        }
    };
    Host.prototype.getScriptSnapshot = function (fileName) {
        var file = this.state.getFile(fileName);
        if (!file) {
            try {
                // ignore excluded javascript
                if (!fileName.match(/\.tsx?$|package[.]json?$/)) {
                    var matchedExcludes = this.state.options.exclude.filter(function (excl) {
                        return fileName.indexOf(excl) !== -1;
                    });
                    if (matchedExcludes.length > 0) {
                        return;
                    }
                }
                var text = this.state.readFileSync(fileName);
                file = {
                    version: 0,
                    text: text
                };
                if (path.basename(fileName) !== 'package.json') {
                    file = this.state.addFile(fileName, text);
                }
            }
            catch (e) {
                return;
            }
        }
        return this.state.ts.ScriptSnapshot.fromString(file.text);
    };
    Host.prototype.getCurrentDirectory = function () {
        return process.cwd();
    };
    Host.prototype.getScriptIsOpen = function () {
        return true;
    };
    Host.prototype.getCompilationSettings = function () {
        return this.state.options;
    };
    Host.prototype.getDefaultLibFileName = function (options) {
        return options.target === this.state.ts.ScriptTarget.ES6 ?
            this.state.compilerInfo.lib6.fileName :
            this.state.compilerInfo.lib5.fileName;
    };
    Host.prototype.resolveModuleNames = function (moduleNames, containingFile) {
        var resolvedModules = [];
        for (var _i = 0, moduleNames_1 = moduleNames; _i < moduleNames_1.length; _i++) {
            var moduleName = moduleNames_1[_i];
            var resolvedFileName = void 0;
            var resolvedModule = void 0;
            try {
                resolvedFileName = this.state.resolver(this.state.normalizePath(path.dirname(containingFile)), moduleName);
                if (!resolvedFileName.match(/\.tsx?$/)) {
                    resolvedFileName = null;
                }
            }
            catch (e) {
                resolvedFileName = null;
            }
            var tsResolved = this.state.ts.resolveModuleName(resolvedFileName || moduleName, containingFile, this.state.options, this.moduleResolutionHost);
            if (tsResolved.resolvedModule) {
                resolvedModule = tsResolved.resolvedModule;
            }
            else {
                resolvedModule = {
                    resolvedFileName: resolvedFileName || ''
                };
            }
            this.moduleResolutionHost.resolutionCache[(containingFile + "::" + moduleName)] = resolvedModule;
            resolvedModules.push(resolvedModule);
        }
        return resolvedModules;
    };
    Host.prototype.log = function (message) {
        // console.log(message);
    };
    return Host;
}());
exports.Host = Host;
var State = (function () {
    function State(options, fsImpl, compilerInfo, resolver) {
        this.files = {};
        this.ts = compilerInfo.tsImpl;
        this.compilerInfo = compilerInfo;
        this.resolver = resolver;
        this.fs = fsImpl;
        this.readFileImpl = promisify(this.fs.readFile.bind(this.fs));
        this.host = new Host(this);
        this.services = this.ts.createLanguageService(this.host, this.ts.createDocumentRegistry());
        this.fileAnalyzer = new deps_1.FileAnalyzer(this);
        this.options = {};
        objectAssign(this.options, options);
        if (this.options.emitRequireType) {
            this.addFile(RUNTIME.fileName, RUNTIME.text);
        }
        if (!this.options.noLib) {
            if (this.options.target === this.ts.ScriptTarget.ES6 || this.options.library === 'es6') {
                this.addFile(this.compilerInfo.lib6.fileName, this.compilerInfo.lib6.text);
            }
            else {
                this.addFile(this.compilerInfo.lib5.fileName, this.compilerInfo.lib5.text);
            }
        }
    }
    State.prototype.updateProgram = function () {
        this.program = this.services.getProgram();
    };
    State.prototype.allFileNames = function () {
        return Object.keys(this.files);
    };
    State.prototype.getSourceFile = function (fileName) {
        var services = this.services;
        // FIXME @spanferov `getNonBoundSourceFile` is internal API
        return (services.getSourceFile || services.getNonBoundSourceFile)(fileName);
    };
    /**
     * Returns all the files in this state.
     * Don't add new files using this value (eg `allFiles()[newFilePath] = ...`), just use it as a
     * read only reference (as otherwise the paths won't be normalized correctly)
     */
    State.prototype.allFiles = function () {
        return this.files;
    };
    State.prototype.emit = function (fileName) {
        fileName = this.normalizePath(fileName);
        if (!this.program) {
            this.program = this.services.getProgram();
        }
        var outputFiles = [];
        function writeFile(fileName, data, writeByteOrderMark) {
            outputFiles.push({
                sourceName: fileName,
                name: fileName,
                writeByteOrderMark: writeByteOrderMark,
                text: data
            });
        }
        var source = this.program.getSourceFile(fileName);
        if (!source) {
            this.updateProgram();
            source = this.program.getSourceFile(fileName);
            if (!source) {
                throw new Error("File " + fileName + " was not found in program");
            }
        }
        var emitResult = this.program.emit(source, writeFile);
        var output = {
            outputFiles: outputFiles,
            emitSkipped: emitResult.emitSkipped
        };
        if (!output.emitSkipped) {
            return output;
        }
        else {
            throw new Error("Emit skipped");
        }
    };
    State.prototype.updateFile = function (fileName, text, checked) {
        if (checked === void 0) { checked = false; }
        fileName = this.normalizePath(fileName);
        var prevFile = this.files[fileName];
        var version = 0;
        var changed = true;
        if (prevFile) {
            if (!checked || (checked && text !== prevFile.text)) {
                version = prevFile.version + 1;
            }
            else {
                changed = false;
            }
        }
        this.files[fileName] = {
            text: text,
            version: version
        };
        return changed;
    };
    State.prototype.addFile = function (fileName, text) {
        fileName = this.normalizePath(fileName);
        return this.files[fileName] = {
            text: text,
            version: 0
        };
    };
    State.prototype.getFile = function (fileName) {
        fileName = this.normalizePath(fileName);
        return this.files[fileName];
    };
    State.prototype.hasFile = function (fileName) {
        fileName = this.normalizePath(fileName);
        return this.files.hasOwnProperty(fileName);
    };
    State.prototype.readFile = function (fileName) {
        return __awaiter(this, void 0, Promise, function* () {
            fileName = this.normalizePath(fileName);
            var buf = yield this.readFileImpl(fileName);
            return buf.toString('utf8');
        });
    };
    State.prototype.readFileSync = function (fileName) {
        fileName = this.normalizePath(fileName);
        // Use global fs here, because local doesn't contain `readFileSync`
        return fs.readFileSync(fileName, { encoding: 'utf-8' });
    };
    State.prototype.readFileAndAdd = function (fileName) {
        return __awaiter(this, void 0, Promise, function* () {
            fileName = this.normalizePath(fileName);
            var text = yield this.readFile(fileName);
            this.addFile(fileName, text);
        });
    };
    State.prototype.readFileAndUpdate = function (fileName, checked) {
        return __awaiter(this, void 0, Promise, function* () {
            if (checked === void 0) { checked = false; }
            fileName = this.normalizePath(fileName);
            var text = yield this.readFile(fileName);
            return this.updateFile(fileName, text, checked);
        });
    };
    State.prototype.readFileAndUpdateSync = function (fileName, checked) {
        if (checked === void 0) { checked = false; }
        fileName = this.normalizePath(fileName);
        var text = this.readFileSync(fileName);
        return this.updateFile(fileName, text, checked);
    };
    State.prototype.normalizePath = function (filePath) {
        return path.normalize(filePath);
    };
    return State;
}());
exports.State = State;
/**
 * Emit compilation result for a specified fileName.
 */
function TypeScriptCompilationError(diagnostics) {
    this.diagnostics = diagnostics;
}
exports.TypeScriptCompilationError = TypeScriptCompilationError;
util.inherits(TypeScriptCompilationError, Error);
//# sourceMappingURL=host.js.map