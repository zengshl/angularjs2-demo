var host_1 = require('./host');
var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var tsconfig = require('tsconfig');
var helpers_1 = require('./helpers');
var deps_1 = require('./deps');
var checker_1 = require('./checker');
var tsconfig_utils_1 = require('./tsconfig-utils');
var resolver_1 = require('./resolver');
var colors = require('colors/safe');
var pkg = require('../package.json');
function getRootCompiler(compiler) {
    if (compiler.parentCompilation) {
        return getRootCompiler(compiler.parentCompilation.compiler);
    }
    else {
        return compiler;
    }
}
function getInstanceStore(compiler) {
    var store = getRootCompiler(compiler)._tsInstances;
    if (store) {
        return store;
    }
    else {
        throw new Error('Can not resolve instance store');
    }
}
function ensureInstanceStore(compiler) {
    var rootCompiler = getRootCompiler(compiler);
    if (!rootCompiler._tsInstances) {
        rootCompiler._tsInstances = {};
    }
}
function resolveInstance(compiler, instanceName) {
    return getInstanceStore(compiler)[instanceName];
}
var COMPILER_ERROR = colors.red("\n\nTypescript compiler cannot be found, please add it to your package.json file:\n    npm install --save-dev typescript\n");
var BABEL_ERROR = colors.red("\n\nBabel compiler cannot be found, please add it to your package.json file:\n    npm install --save-dev babel-core\n");
/**
 * Creates compiler instance
 */
var id = 0;
function ensureInstance(webpack, options, instanceName) {
    ensureInstanceStore(webpack._compiler);
    var exInstance = resolveInstance(webpack._compiler, instanceName);
    if (exInstance) {
        return exInstance;
    }
    var tsFlow = Promise.resolve();
    var compilerName = options.compiler || 'typescript';
    var compilerPath = path.dirname(compilerName);
    if (compilerPath == '.') {
        compilerPath = compilerName;
    }
    var tsImpl;
    try {
        tsImpl = require(compilerPath);
    }
    catch (e) {
        console.error(e);
        console.error(COMPILER_ERROR);
        process.exit(1);
    }
    var libPath = path.join(compilerPath, 'lib', 'lib.d.ts');
    var lib6Path = path.join(compilerPath, 'lib', 'lib.es6.d.ts');
    try {
        require.resolve(libPath);
    }
    catch (e) {
        libPath = path.join(compilerPath, 'bin', 'lib.d.ts');
        lib6Path = path.join(compilerPath, 'bin', 'lib.es6.d.ts');
    }
    var compilerInfo = {
        compilerName: compilerName,
        compilerPath: compilerPath,
        tsImpl: tsImpl,
        lib5: helpers_1.loadLib(libPath),
        lib6: helpers_1.loadLib(lib6Path)
    };
    _.defaults(options, {
        resolveGlobs: true
    });
    var configFilePath;
    var configFile;
    if (options.tsconfig && options.tsconfig.match(/\.json$/)) {
        configFilePath = options.tsconfig;
    }
    else {
        configFilePath = tsconfig.resolveSync(options.tsconfig || process.cwd());
    }
    if (configFilePath) {
        var content = fs.readFileSync(configFilePath).toString();
        configFile = tsconfig_utils_1.parseContent(content, configFilePath);
        if (options.resolveGlobs) {
            tsconfig_utils_1.tsconfigSuggestions(configFile);
            configFile = tsconfig.readFileSync(configFilePath, { filterDefinitions: true });
        }
    }
    var tsFiles = [];
    if (configFile) {
        if (configFile.compilerOptions) {
            _.defaults(options, configFile.awesomeTypescriptLoaderOptions);
            _.defaults(options, configFile.compilerOptions);
            options.exclude = configFile.exclude || [];
            tsFiles = configFile.files;
        }
    }
    options = tsconfig_utils_1.rawToTsCompilerOptions(options, path.dirname(configFilePath), tsImpl);
    _.defaults(options, {
        externals: [],
        doTypeCheck: true,
        sourceMap: true,
        verbose: false,
        noLib: false,
        skipDefaultLibCheck: true,
        suppressOutputPathCheck: true,
        sourceRoot: options.sourceMap ? process.cwd() : undefined
    });
    options = _.omit(options, 'outDir', 'files', 'out', 'noEmit');
    options.externals.push.apply(options.externals, tsFiles);
    var babelImpl;
    if (options.useBabel) {
        try {
            babelImpl = require(path.join(process.cwd(), 'node_modules', 'babel-core'));
        }
        catch (e) {
            console.error(BABEL_ERROR);
            process.exit(1);
        }
    }
    var cacheIdentifier = null;
    if (options.useCache) {
        if (!options.cacheDirectory) {
            options.cacheDirectory = path.join(process.cwd(), '.awcache');
        }
        if (!fs.existsSync(options.cacheDirectory)) {
            fs.mkdirSync(options.cacheDirectory);
        }
        cacheIdentifier = {
            'typescript': tsImpl.version,
            'awesome-typescript-loader': pkg.version,
            'awesome-typescript-loader-query': webpack.query,
            'babel-core': babelImpl
                ? babelImpl.version
                : null
        };
    }
    var forkChecker = options.forkChecker && getRootCompiler(webpack._compiler)._tsFork;
    var resolver = resolver_1.default(webpack._compiler.options);
    var syncResolver = resolver.resolveSync.bind(resolver);
    var tsState = new host_1.State(options, webpack._compiler.inputFileSystem, compilerInfo, syncResolver);
    var compiler = webpack._compiler;
    setupWatchRun(compiler, instanceName);
    if (options.doTypeCheck) {
        setupAfterCompile(compiler, instanceName, forkChecker);
    }
    var webpackOptions = _.pick(webpack._compiler.options, 'resolve');
    var atlOptions = webpack.options.atl;
    var plugins = [];
    if (atlOptions && atlOptions.plugins) {
        plugins = atlOptions.plugins;
    }
    var initedPlugins = [];
    if (!forkChecker) {
        initedPlugins = plugins.map(function (plugin) {
            return require(plugin.file)(plugin.options);
        });
    }
    return getInstanceStore(webpack._compiler)[instanceName] = {
        id: ++id,
        tsFlow: tsFlow,
        tsState: tsState,
        babelImpl: babelImpl,
        compiledFiles: {},
        options: options,
        externalsInvoked: false,
        checker: forkChecker
            ? checker_1.createChecker(compilerInfo, options, webpackOptions, plugins)
            : null,
        cacheIdentifier: cacheIdentifier,
        plugins: plugins,
        initedPlugins: initedPlugins,
        externalsInvocation: null
    };
}
exports.ensureInstance = ensureInstance;
var EXTENSIONS = /\.tsx?$|\.jsx?$/;
function setupWatchRun(compiler, instanceName) {
    compiler.plugin('watch-run', function (watching, callback) {
        var compiler = watching.compiler;
        var instance = resolveInstance(watching.compiler, instanceName);
        var state = instance.tsState;
        var resolver = deps_1.createResolver(compiler.options.externals, state.options.exclude || [], watching.compiler.resolvers.normal.resolve, watching.compiler.resolvers.normal);
        var mtimes = watching.compiler.watchFileSystem.watcher.mtimes;
        var changedFiles = Object.keys(mtimes);
        changedFiles.forEach(function (changedFile) {
            state.fileAnalyzer.validFiles.markFileInvalid(changedFile);
        });
        try {
            var tasks = changedFiles.map(function (changedFile) {
                if (EXTENSIONS.test(changedFile)) {
                    if (state.hasFile(changedFile)) {
                        yield state.readFileAndUpdate(changedFile);
                        yield state.fileAnalyzer.checkDependencies(resolver, changedFile);
                    }
                }
            });
            yield Promise.all(tasks);
            state.updateProgram();
            callback();
        }
        catch (err) {
            console.error(err.toString());
            callback();
        }
    });
}
var runChecker = function (instance, payload) {
    instance.checker.send({
        messageType: 'compile',
        payload: payload
    });
};
runChecker = _.debounce(runChecker, 200);
function setupAfterCompile(compiler, instanceName, forkChecker) {
    if (forkChecker === void 0) { forkChecker = false; }
    compiler.plugin('after-compile', function (compilation, callback) {
        // Don't add errors for child compilations
        if (compilation.compiler.isChild()) {
            callback();
            return;
        }
        var instance = resolveInstance(compilation.compiler, instanceName);
        var state = instance.tsState;
        if (forkChecker) {
            var payload = {
                files: state.allFiles(),
                resolutionCache: state.host.moduleResolutionHost.resolutionCache
            };
            runChecker(instance, payload);
        }
        else {
            if (!state.program) {
                // program may be undefined here, if all files
                // will be loaded by tsconfig
                state.updateProgram();
            }
            var diagnostics = state.ts.getPreEmitDiagnostics(state.program);
            var emitError = function (err) {
                if (compilation.bail) {
                    console.error('Error in bail mode:', err);
                    process.exit(1);
                }
                compilation.errors.push(new Error(err));
            };
            var errors = helpers_1.formatErrors(instanceName, diagnostics);
            errors.forEach(emitError);
            instance.initedPlugins.forEach(function (plugin) {
                plugin.processProgram(state.program);
            });
        }
        var phantomImports = [];
        state.allFileNames().forEach(function (fileName) {
            if (!instance.compiledFiles[fileName]) {
                phantomImports.push(fileName);
            }
        });
        if (instance.options.declaration) {
            phantomImports.forEach(function (imp) {
                var output = instance.tsState.services.getEmitOutput(imp);
                var declarationFile = output.outputFiles.filter(function (filePath) {
                    return !!filePath.name.match(/\.d.ts$/);
                })[0];
                if (declarationFile) {
                    var assetPath = path.relative(process.cwd(), declarationFile.name);
                    compilation.assets[assetPath] = {
                        source: function () { return declarationFile.text; },
                        size: function () { return declarationFile.text.length; }
                    };
                }
            });
        }
        instance.compiledFiles = {};
        compilation.fileDependencies.push.apply(compilation.fileDependencies, phantomImports);
        compilation.fileDependencies = _.uniq(compilation.fileDependencies);
        callback();
    });
}
//# sourceMappingURL=instance.js.map