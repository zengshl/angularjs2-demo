"use strict";
// naive Map shim
exports.cacheSentinel = {};
var Map = (function () {
    function Map() {
        this._keys = [];
        this._values = [];
        this._cache = exports.cacheSentinel;
    }
    Object.defineProperty(Map.prototype, "length", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Map.prototype, "size", {
        get: function () {
            return this._keys.length;
        },
        enumerable: true,
        configurable: true
    });
    Map.prototype.has = function (key) {
        if (key === this._cache) {
            return true;
        }
        if (this._find(key) >= 0) {
            this._cache = key;
            return true;
        }
        return false;
    };
    Map.prototype.get = function (key) {
        var index = this._find(key);
        if (index >= 0) {
            this._cache = key;
            return this._values[index];
        }
        return undefined;
    };
    Map.prototype.set = function (key, value) {
        this.delete(key);
        this._keys.push(key);
        this._values.push(value);
        this._cache = key;
        return this;
    };
    Map.prototype.delete = function (key) {
        var index = this._find(key);
        if (index >= 0) {
            this._keys.splice(index, 1);
            this._values.splice(index, 1);
            this._cache = exports.cacheSentinel;
            return true;
        }
        return false;
    };
    Map.prototype.clear = function () {
        this._keys.length = 0;
        this._values.length = 0;
        this._cache = exports.cacheSentinel;
    };
    Map.prototype.forEach = function (callback, thisArg) {
        var size = this.size;
        for (var i = 0; i < size; ++i) {
            var key = this._keys[i];
            var value = this._values[i];
            this._cache = key;
            callback.call(this, value, key, this);
        }
    };
    Map.prototype._find = function (key) {
        var keys = this._keys;
        var size = keys.length;
        for (var i = 0; i < size; ++i) {
            if (keys[i] === key) {
                return i;
            }
        }
        return -1;
    };
    return Map;
}());
exports.Map = Map;
function createMapPolyfill() {
    return Map;
}
exports.createMapPolyfill = createMapPolyfill;
//# sourceMappingURL=map.js.map