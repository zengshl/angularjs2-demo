var core_1 = require('@angular/core');
var Dimmer = (function () {
    function Dimmer() {
        this.classes = true;
        this.isClickable = true;
        this.isDimmed = false;
        this.isDimmedChange = new core_1.EventEmitter(false);
    }
    Dimmer.prototype.click = function () {
        if (this.isClickable) {
            this.isDimmed = false;
            this.isDimmedChange.emit(this.isDimmed);
        }
    };
    __decorate([
        core_1.HostBinding('class.ui'),
        core_1.HostBinding('class.dimmer'), 
        __metadata('design:type', Object)
    ], Dimmer.prototype, "classes", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Dimmer.prototype, "isClickable", void 0);
    __decorate([
        core_1.HostBinding('class.active'),
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Dimmer.prototype, "isDimmed", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], Dimmer.prototype, "isDimmedChange", void 0);
    __decorate([
        core_1.HostListener('click'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], Dimmer.prototype, "click", null);
    Dimmer = __decorate([
        core_1.Component({
            selector: 'sui-dimmer',
            template: "\n<div class=\"content\">\n    <div class=\"center\">\n        <ng-content></ng-content>\n    </div>\n</div>\n",
            styles: ["\n:host.dimmer {\n    transition: visibility 0.3s, opacity 0.3s ease;\n    display: block;\n    visibility: hidden;\n}\n\n:host.active {\n    visibility: visible;\n}\n"]
        }), 
        __metadata('design:paramtypes', [])
    ], Dimmer);
    return Dimmer;
})();
exports.Dimmer = Dimmer;
//# sourceMappingURL=dimmer.component.js.map