var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var Rating = (function () {
    function Rating() {
        this.ratingClasses = true;
        this._value = 0;
        this._max = 5;
        this.valueChange = new core_1.EventEmitter(false);
        this._hoveredIndex = -1;
        this.isReadonly = false;
    }
    Object.defineProperty(Rating.prototype, "max", {
        set: function (value) {
            this._max = parseInt(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rating.prototype, "icons", {
        get: function () {
            return Array(this._max);
        },
        enumerable: true,
        configurable: true
    });
    Rating.prototype.mouseover = function (i) {
        this._hoveredIndex = i;
    };
    Rating.prototype.mouseout = function () {
        this._hoveredIndex = -1;
    };
    Rating.prototype.click = function (i) {
        if (!this.isReadonly) {
            this._value = i + 1;
            this.valueChange.emit(this._value);
        }
    };
    Rating.prototype.writeValue = function (value) {
        this._value = value;
    };
    __decorate([
        core_1.HostBinding('class.ui'),
        core_1.HostBinding('class.rating'), 
        __metadata('design:type', Object)
    ], Rating.prototype, "ratingClasses", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], Rating.prototype, "max", null);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], Rating.prototype, "valueChange", void 0);
    __decorate([
        core_1.HostListener('mouseout'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], Rating.prototype, "mouseout", null);
    __decorate([
        core_1.HostBinding('class.read-only'),
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Rating.prototype, "isReadonly", void 0);
    Rating = __decorate([
        core_1.Component({
            selector: 'sui-rating',
            template: "\n<i class=\"icon\"\n   *ngFor=\"let icon of icons; let i = index\"\n   (mouseover)=\"mouseover(i)\"\n   (click)=\"click(i)\"\n   [class.selected]=\"_hoveredIndex >= i && !isReadonly\"\n   [class.active]=\"_value > i\">\n</i>\n",
            styles: [":host.read-only .icon { cursor: auto }"]
        }), 
        __metadata('design:paramtypes', [])
    ], Rating);
    return Rating;
})();
exports.Rating = Rating;
var CUSTOM_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return RatingValueAccessor; }), multi: true });
var RatingValueAccessor = (function () {
    function RatingValueAccessor(host) {
        this.host = host;
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    RatingValueAccessor.prototype.writeValue = function (value) {
        this.host.writeValue(value);
    };
    RatingValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    RatingValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    RatingValueAccessor = __decorate([
        core_1.Directive({
            selector: 'sui-rating',
            host: { '(valueChange)': 'onChange($event)' },
            providers: [CUSTOM_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [Rating])
    ], RatingValueAccessor);
    return RatingValueAccessor;
})();
exports.RatingValueAccessor = RatingValueAccessor;
//# sourceMappingURL=rating.component.js.map