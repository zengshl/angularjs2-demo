var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var Checkbox = (function () {
    function Checkbox() {
        this.classes = true;
        this.checked = false;
        this.checkChange = new core_1.EventEmitter(false);
        this.isDisabled = false;
        this.isReadonly = false;
    }
    Object.defineProperty(Checkbox.prototype, "checkedAttribute", {
        get: function () {
            return this.checked ? "" : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Checkbox.prototype, "isDisabledAttribute", {
        get: function () {
            return this.isDisabled ? "disabled" : null;
        },
        enumerable: true,
        configurable: true
    });
    Checkbox.prototype.onClick = function () {
        if (!this.isDisabled && !this.isReadonly) {
            this.toggle();
        }
    };
    Checkbox.prototype.toggle = function () {
        this.checked = !this.checked;
        this.checkChange.emit(this.checked);
    };
    Checkbox.prototype.writeValue = function (value) {
        var _this = this;
        setTimeout(function () {
            _this.checked = value;
        });
    };
    __decorate([
        core_1.HostBinding('class.ui'),
        core_1.HostBinding('class.checkbox'), 
        __metadata('design:type', Object)
    ], Checkbox.prototype, "classes", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Checkbox.prototype, "name", void 0);
    __decorate([
        core_1.HostBinding('class.checked'), 
        __metadata('design:type', Boolean)
    ], Checkbox.prototype, "checked", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], Checkbox.prototype, "checkChange", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Checkbox.prototype, "isDisabled", void 0);
    __decorate([
        core_1.HostBinding('class.read-only'),
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Checkbox.prototype, "isReadonly", void 0);
    __decorate([
        core_1.HostListener('click'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], Checkbox.prototype, "onClick", null);
    Checkbox = __decorate([
        core_1.Component({
            selector: 'sui-checkbox',
            template: "\n<input class=\"hidden\" type=\"checkbox\" [attr.name]=\"name\" [attr.checked]=\"checkedAttribute\" [attr.disabled]=\"isDisabledAttribute\" [(ngModel)]=\"checked\">\n<label>\n    <ng-content></ng-content>\n</label>\n"
        }), 
        __metadata('design:paramtypes', [])
    ], Checkbox);
    return Checkbox;
})();
exports.Checkbox = Checkbox;
var CUSTOM_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return CheckboxValueAccessor; }), multi: true });
var CheckboxValueAccessor = (function () {
    function CheckboxValueAccessor(host) {
        this.host = host;
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    CheckboxValueAccessor.prototype.writeValue = function (value) {
        this.host.writeValue(!!value);
    };
    CheckboxValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    CheckboxValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    CheckboxValueAccessor = __decorate([
        core_1.Directive({
            selector: 'sui-checkbox',
            host: { '(checkChange)': 'onChange($event)' },
            providers: [CUSTOM_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [Checkbox])
    ], CheckboxValueAccessor);
    return CheckboxValueAccessor;
})();
exports.CheckboxValueAccessor = CheckboxValueAccessor;
//# sourceMappingURL=checkbox.component.js.map