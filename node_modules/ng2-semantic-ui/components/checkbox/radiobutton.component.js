var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var RadioButton = (function () {
    function RadioButton() {
        this.classes = true;
        this.value = "";
        this.isDisabled = false;
        this.isReadonly = false;
        this.checked = false;
        this.currentValueChange = new core_1.EventEmitter(false);
    }
    Object.defineProperty(RadioButton.prototype, "checkedAttribute", {
        get: function () {
            return this.checked ? "" : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButton.prototype, "isDisabledAttribute", {
        get: function () {
            return this.isDisabled ? "disabled" : null;
        },
        enumerable: true,
        configurable: true
    });
    RadioButton.prototype.onClick = function () {
        if (!this.isDisabled && !this.isReadonly) {
            this.currentValue = this.value;
            this.currentValueChange.emit(this.currentValue);
            this.update();
        }
    };
    RadioButton.prototype.update = function () {
        var _this = this;
        //This is a horrible hack - need to rewrite!
        setTimeout(function () {
            _this.checked = _this.currentValue == _this.value;
        });
    };
    RadioButton.prototype.writeValue = function (value) {
        this.currentValue = value;
        this.update();
    };
    __decorate([
        core_1.HostBinding('class.ui'),
        core_1.HostBinding('class.radio'),
        core_1.HostBinding('class.checkbox'), 
        __metadata('design:type', Object)
    ], RadioButton.prototype, "classes", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], RadioButton.prototype, "name", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], RadioButton.prototype, "value", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], RadioButton.prototype, "isDisabled", void 0);
    __decorate([
        core_1.HostBinding('class.read-only'),
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], RadioButton.prototype, "isReadonly", void 0);
    __decorate([
        core_1.HostBinding('class.checked'), 
        __metadata('design:type', Boolean)
    ], RadioButton.prototype, "checked", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], RadioButton.prototype, "currentValueChange", void 0);
    __decorate([
        core_1.HostListener('click'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], RadioButton.prototype, "onClick", null);
    RadioButton = __decorate([
        core_1.Component({
            selector: 'sui-radio-button[ngModel]',
            directives: [],
            template: "\n<input class=\"hidden\"\n       type=\"checkbox\"\n       [attr.name]=\"name\"\n       [attr.checked]=\"checkedAttribute\"\n       [attr.disabled]=\"isDisabledAttribute\"\n       [ngModel]=\"checked\"\n       (ngModel)=\"currentValue = value\">\n<label>\n    <ng-content></ng-content>\n</label>\n"
        }), 
        __metadata('design:paramtypes', [])
    ], RadioButton);
    return RadioButton;
})();
exports.RadioButton = RadioButton;
var CUSTOM_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return RadioButtonValueAccessor; }), multi: true });
var RadioButtonValueAccessor = (function () {
    function RadioButtonValueAccessor(host) {
        this.host = host;
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    RadioButtonValueAccessor.prototype.writeValue = function (value) {
        this.host.writeValue(value);
    };
    RadioButtonValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    RadioButtonValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    RadioButtonValueAccessor = __decorate([
        core_1.Directive({
            selector: 'sui-radio-button',
            host: { '(currentValueChange)': 'onChange($event)' },
            providers: [CUSTOM_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [RadioButton])
    ], RadioButtonValueAccessor);
    return RadioButtonValueAccessor;
})();
exports.RadioButtonValueAccessor = RadioButtonValueAccessor;
//# sourceMappingURL=radiobutton.component.js.map