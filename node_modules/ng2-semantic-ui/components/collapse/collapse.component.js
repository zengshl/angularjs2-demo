var core_1 = require('@angular/core');
// import {AnimationBuilder} from '@angular/core/src/animate/animation_builder';
var Collapse = (function () {
    function Collapse(/*_ab:AnimationBuilder,*/ _el, _renderer) {
        // @HostBinding('style.display')
        this.display = "none";
        // shown
        this.isExpanded = true;
        // hidden
        this.isCollapsed = false;
        // animation state
        this.isCollapsing = false;
        this.transitionDuration = 300;
        // this._ab = _ab;
        this._el = _el;
        this._renderer = _renderer;
    }
    Object.defineProperty(Collapse.prototype, "suiCollapse", {
        get: function () {
            return this.isExpanded;
        },
        set: function (value) {
            this.isExpanded = value;
            this.isCollapsed = !this.isExpanded;
            this.toggle();
        },
        enumerable: true,
        configurable: true
    });
    Collapse.prototype.ngOnInit = function () {
        // this.animation = this._ab.css();
        // this.animation.setDuration(this.transitionDuration);
    };
    Collapse.prototype.toggle = function () {
        if (this.isExpanded) {
            this.hide();
        }
        else {
            this.show();
        }
    };
    Collapse.prototype.hide = function () {
        this.isCollapsing = true;
        this.isExpanded = false;
        this._renderer.setElementStyle(this._el.nativeElement, 'overflow', 'hidden');
        this._renderer.setElementStyle(this._el.nativeElement, 'height', '0');
        this.isCollapsing = false;
        this.isCollapsed = true;
        // setTimeout(() => {
        //     // this.height = '0';
        //     // this.isCollapse = true;
        //     // this.isCollapsing = false;
        //     this.animation
        //         .setFromStyles({
        //             height: this._el.nativeElement.scrollHeight + 'px',
        //             //This is to fix the border issue
        //             padding: "0 1px 0 1px",
        //             margin: "0 -1px 0 -1px"
        //         })
        //         .setToStyles({
        //             height: '0',
        //             overflow: 'hidden'
        //         });
        //
        //     this.animation.start(this._el.nativeElement)
        //         .onComplete(() => {
        //             if (this._el.nativeElement.offsetHeight === 0) {
        //                 this.display = 'none';
        //             }
        //
        //             this.isCollapsing = false;
        //             this.isCollapsed = true;
        //         });
        // }, 4);
    };
    Collapse.prototype.show = function () {
        this.isCollapsing = true;
        this.isCollapsed = false;
        this.display = '';
        this._renderer.setElementStyle(this._el.nativeElement, 'overflow', 'visible');
        this._renderer.setElementStyle(this._el.nativeElement, 'height', 'auto');
        this.isCollapsing = false;
        this.isExpanded = true;
        // setTimeout(() => {
        //     // this.height = 'auto';
        //     // this.isCollapse = true;
        //     // this.isCollapsing = false;
        //     this.animation
        //         .setFromStyles({
        //             height: this._el.nativeElement.offsetHeight,
        //             overflow: 'hidden'
        //         })
        //         .setToStyles({
        //             height: this._el.nativeElement.scrollHeight + 'px',
        //             //This is to fix the border issue
        //             padding: "0 1px 0 1px",
        //             margin: "0 -1px 0 -1px"
        //         });
        //
        //     this.animation.start(this._el.nativeElement)
        //         .onComplete(() => {
        //             this.isCollapsing = false;
        //             this.isExpanded = true;
        //         });
        // }, 4);
    };
    __decorate([
        core_1.HostBinding('class.expanded'), 
        __metadata('design:type', Boolean)
    ], Collapse.prototype, "isExpanded", void 0);
    __decorate([
        core_1.HostBinding('class.collapsed'), 
        __metadata('design:type', Boolean)
    ], Collapse.prototype, "isCollapsed", void 0);
    __decorate([
        core_1.HostBinding('class.collapsing'), 
        __metadata('design:type', Boolean)
    ], Collapse.prototype, "isCollapsing", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], Collapse.prototype, "transitionDuration", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], Collapse.prototype, "suiCollapse", null);
    Collapse = __decorate([
        core_1.Directive({
            selector: '[suiCollapse]'
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
    ], Collapse);
    return Collapse;
})();
exports.Collapse = Collapse;
//# sourceMappingURL=collapse.component.js.map