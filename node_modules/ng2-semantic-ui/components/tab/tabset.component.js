var core_1 = require('@angular/core');
var tab_content_directive_1 = require('./tab-content.directive');
var tab_directive_1 = require("./tab.directive");
var Tabset = (function () {
    function Tabset() {
        this._loadedTabs = [];
    }
    Tabset.prototype.ngAfterContentInit = function () {
        var _this = this;
        //Once we have loaded and found all child suiTabs and suiTabHeaders, link them together
        this.loadTabs();
        this._tabs.changes.subscribe(function (tabHeaders) { return _this.loadTabs(); });
    };
    //This runs every time the contents of the component change
    Tabset.prototype.loadTabs = function () {
        var _this = this;
        this._loadedTabs = this._tabs.toArray();
        if (!this._loadedTabs.length) {
            throw new Error("You cannot have no tabs!");
        }
        //For every content header we have managed to find,
        this._loadedTabs.forEach(function (t) {
            //Assuming they have an associated content
            if (!t.content) {
                //Link the content header with the content with the same ID excluding ones that are already linked
                var possibleContents = _this._tabContents.filter(function (tC) { return tC.id == t.id; });
                if (possibleContents.length == 0) {
                    throw new Error("A [suiTabHeader] must have a related [suiTabContent].");
                }
                if (possibleContents.length > 1) {
                    throw new Error("A [suiTabHeader] must not have more than 1 related [suiTabContent].");
                }
                t.content = possibleContents.pop();
            }
            //Next observe the content's state to catch any changes made anywhere
            t.stateChanged$.subscribe(function (t) { return _this.tabStateChanged(t); });
        });
        setTimeout(function () {
            //If there isn't an active content that is currently a loaded content already, activate the first available content
            if ((_this._activeTab && !_this._loadedTabs.find(function (t) { return t == _this._activeTab; })) || !_this._activeTab) {
                _this.activateFirstTab();
            }
        });
    };
    //This runs when any content changes state (e.g. isActive changed, isDisabled changed)
    Tabset.prototype.tabStateChanged = function (tab) {
        //Check if the content is now active
        if (tab.isActive && this._activeTab != tab) {
            //If so, deactivate all other tabs that aren't this one
            this._loadedTabs
                .filter(function (tH) { return tH != tab; })
                .forEach(function (tH) { return tH.isActive = false; });
            //Set this content to be the current active content
            this._activeTab = tab;
        }
        else if (this._activeTab && !this._loadedTabs.filter(function (tH) { return tH.isActive; }).length) {
            this.activateClosestTab(tab);
        }
        //Check if the content is now disabled, and if so if is currently active
        if (tab.isDisabled && tab.isActive) {
            //If so, unset the content as it is now disabled
            tab.isActive = false;
            //Find the first available content to activate
            this.activateClosestTab(tab);
        }
        //Check if all of the tabs are disabled
        if (tab.isDisabled && !this._loadedTabs.filter(function (tH) { return !tH.isDisabled; }).length) {
            throw new Error("You cannot disable all of your tabs!");
        }
    };
    //This activates the first content that isn't disabled
    Tabset.prototype.activateFirstTab = function () {
        //Filter out all disabled tabs from the currently loaded list and take the first one
        var firstAvailable = this._loadedTabs.filter(function (tH) { return !tH.isDisabled; })[0];
        if (firstAvailable) {
            //If there is one available, activate it and set it to the currently active content
            firstAvailable.isActive = true;
        }
    };
    //This activates the closest available content to the one provided
    Tabset.prototype.activateClosestTab = function (tab) {
        //Grab a list of all of the loaded tabs that aren't disabled (excluding the one we are leaving)
        var availableTabs = this._loadedTabs
            .filter(function (tH) { return !tH.isDisabled || tH == tab; });
        var tabIndex = availableTabs
            .findIndex(function (tH) { return tH == tab; });
        //Go to the previous content, unless it is the 1st content.
        tabIndex += (tabIndex ? -1 : 1);
        availableTabs[tabIndex].isActive = true;
        //This if we just activated a disabled content, not to worry as it will bubble through
    };
    __decorate([
        core_1.ContentChildren(tab_directive_1.Tab), 
        __metadata('design:type', core_1.QueryList)
    ], Tabset.prototype, "_tabs", void 0);
    __decorate([
        core_1.ContentChildren(tab_content_directive_1.TabContent), 
        __metadata('design:type', core_1.QueryList)
    ], Tabset.prototype, "_tabContents", void 0);
    Tabset = __decorate([
        core_1.Component({
            selector: 'sui-tabset',
            directives: [],
            template: "<ng-content></ng-content>",
            styles: ["\n:host .ui.segment {\n    margin-bottom: 0;\n}\n"]
        }), 
        __metadata('design:paramtypes', [])
    ], Tabset);
    return Tabset;
})();
exports.Tabset = Tabset;
//# sourceMappingURL=tabset.component.js.map