var core_1 = require('@angular/core');
var Observable_1 = require('rxjs/Observable');
var Tab = (function () {
    function Tab() {
        var _this = this;
        this._isActive = false;
        this._isDisabled = false;
        this.isActiveChange = new core_1.EventEmitter(false);
        this.onActivate = new core_1.EventEmitter(false);
        this.stateChanged$ = new Observable_1.Observable(function (observer) { return _this._stateObserver = observer; });
    }
    Object.defineProperty(Tab.prototype, "suiTabHeader", {
        set: function (value) {
            if (!this.id) {
                this.id = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "content", {
        get: function () { return this._content; },
        set: function (content) {
            this._content = content;
            content.isActive = this.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "isActive", {
        get: function () { return this._isActive; },
        set: function (value) {
            var change = this._isActive != value;
            this._isActive = value;
            this._content.isActive = value;
            this.stateObserverNext(change);
            this.isActiveChange.emit(this._isActive);
            if (value && change) {
                this.onActivate.emit(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "isDisabled", {
        get: function () {
            return this._isDisabled;
        },
        set: function (value) {
            var change = this._isDisabled != value;
            this._isDisabled = value;
            this.stateObserverNext(change);
        },
        enumerable: true,
        configurable: true
    });
    Tab.prototype.stateObserverNext = function (change) {
        if (change) {
            this._stateObserver.next(this);
        }
    };
    Object.defineProperty(Tab.prototype, "manuallyActivate", {
        set: function (value) {
            var _this = this;
            setTimeout(function () {
                _this.isActive = _this.isDisabled ? false : value;
                _this.isActiveChange.emit(_this._isActive);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tab.prototype, "manuallyDisable", {
        set: function (value) {
            var _this = this;
            setTimeout(function () {
                _this.isDisabled = value;
            });
        },
        enumerable: true,
        configurable: true
    });
    Tab.prototype.click = function () {
        if (!this.isDisabled) {
            this.isActive = true;
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], Tab.prototype, "suiTabHeader", null);
    __decorate([
        core_1.HostBinding('class.active'), 
        __metadata('design:type', Object)
    ], Tab.prototype, "isActive", null);
    __decorate([
        core_1.HostBinding('class.disabled'), 
        __metadata('design:type', Object)
    ], Tab.prototype, "isDisabled", null);
    __decorate([
        core_1.Input('isActive'), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], Tab.prototype, "manuallyActivate", null);
    __decorate([
        core_1.Input('isDisabled'), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], Tab.prototype, "manuallyDisable", null);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], Tab.prototype, "isActiveChange", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], Tab.prototype, "onActivate", void 0);
    __decorate([
        core_1.HostListener('click'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], Tab.prototype, "click", null);
    Tab = __decorate([
        core_1.Directive({
            selector: '[suiTabHeader]'
        }), 
        __metadata('design:paramtypes', [])
    ], Tab);
    return Tab;
})();
exports.Tab = Tab;
//# sourceMappingURL=tab.directive.js.map