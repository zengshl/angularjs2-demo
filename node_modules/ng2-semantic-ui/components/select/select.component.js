var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var search_1 = require('../search');
var dropdown_1 = require('../dropdown');
var dropdown_service_1 = require('../dropdown/dropdown.service');
var Select = (function (_super) {
    __extends(Select, _super);
    function Select(el) {
        var _this = this;
        _super.call(this, el);
        this.el = el;
        this.searchClasses = true;
        this.isSearchable = false;
        this.allowMultiple = false;
        this.searchDelay = 0;
        this._loading = false;
        this.placeholder = "Select one";
        this.selectedOptions = [];
        this.selectedOptionsHTML = [];
        this.maxSelectedReached = false;
        this.renderedOptions = [];
        this._allowEmptyQuery = true;
        this._service.autoClose = "outsideClick";
        this._service.itemClass = "item";
        this._service.itemSelectedClass = "selected";
        this._service.isOpenChange.subscribe(function (isOpen) {
            if (isOpen) {
                if (_this.isSearchable && !_this._service.selectedItem) {
                    _this._service.selectNextItem();
                }
            }
            else {
                if (_this.query && !_this.allowMultiple) {
                    if (_this._service.selectedItem) {
                        _this._service.selectedItem.click();
                        return;
                    }
                    _this._query = "";
                }
            }
        });
    }
    Object.defineProperty(Select.prototype, "isOpen", {
        get: function () {
            return this._service.isOpen;
        },
        set: function (value) {
            this._service.isOpen = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Select.prototype, "results", {
        get: function () {
            var _this = this;
            this.maxSelectedReached = false;
            var results = this.options;
            if (this.isSearchable || this._optionsLookup) {
                results = this._results;
            }
            if (this.allowMultiple) {
                results = results.filter(function (r) { return (_this.selectedOptions || []).indexOf(r) == -1; });
                if (this.selectedOptions && this.maxSelected == this.selectedOptions.length) {
                    this.maxSelectedReached = true;
                    results = [];
                }
            }
            return results;
        },
        enumerable: true,
        configurable: true
    });
    Select.prototype.ngOnInit = function () {
        if (this.isSearchable) {
            //Initialise initial results
            this.search();
        }
    };
    Select.prototype.selectOption = function (selectOption) {
        if (!this.allowMultiple) {
            _super.prototype.select.call(this, selectOption.value);
            this.selectedOptionHTML = selectOption.HTML;
        }
        else {
            this.selectedOptions = this.selectedOptions || [];
            this.selectedOptions.push(selectOption.value);
            this.selectedOptionsHTML.push(selectOption.HTML);
            this.selectedOptionChange.emit(this.selectedOptions);
            this.onItemSelected.emit(selectOption.value);
        }
        if (this.isSearchable) {
            this.focusFirstItem();
            this.focusSearch();
        }
        this._query = "";
        if (this.isSearchable) {
            this.search();
        }
    };
    Select.prototype.deselectOption = function (option) {
        var index = this.selectedOptions.indexOf(option);
        this.selectedOptions.splice(index, 1);
        this.selectedOptionsHTML.splice(index, 1);
        this.selectedOptionChange.emit(this.selectedOptions);
        if (this.isSearchable) {
            this.focusFirstItem();
        }
    };
    //noinspection JSMethodCanBeStatic
    Select.prototype.selectedOptionClick = function (event) {
        event.stopPropagation();
    };
    Select.prototype.focusSearch = function () {
        if (this.isSearchable) {
            this._service.dropdownElement.nativeElement.querySelector("input").focus();
        }
    };
    Select.prototype.focusFirstItem = function () {
        var _this = this;
        setTimeout(function () {
            _this._service.selectedItem = null;
            _this._service.selectNextItem();
        });
    };
    Select.prototype.writeValue = function (value) {
        var _this = this;
        if (this.allowMultiple) {
            //This allows all of the possible results to load in first, so we can set the innerHTML correctly without using a template.
            setTimeout(function () {
                _this.selectedOptions = value;
                (_this.selectedOptions || []).forEach(function (v, i) {
                    _this.selectedOptionsHTML[i] = _this.renderedOptions.find(function (rO) { return rO.value == v; }).HTML;
                });
            });
            return;
        }
        this.selectedOption = value;
        if (value) {
            setTimeout(function () { return _this.selectedOptionHTML = _this.renderedOptions.find(function (rO) { return rO.value == value; }).HTML; });
        }
    };
    Select.prototype.click = function (event) {
        var _this = this;
        event.stopPropagation();
        if (!this._service.menuElement.nativeElement.contains(event.target)) {
            if (!this.isOpen) {
                this.search(function () {
                    _this._loading = false;
                    _this.isOpen = true;
                    _this.focusSearch();
                });
            }
            else if (event.target.tagName != "INPUT") {
                this.isOpen = false;
            }
        }
        return false;
    };
    Select.prototype.searchKeyDown = function (event) {
        if (event.which == dropdown_service_1.KEYCODE.BACKSPACE && !this._query) {
            var selectedOptions = this.selectedOptions || [];
            var lastSelectedOption = selectedOptions[selectedOptions.length - 1];
            if (lastSelectedOption) {
                this.deselectOption(lastSelectedOption);
            }
        }
    };
    __decorate([
        core_1.ViewChild(dropdown_1.DropdownMenu), 
        __metadata('design:type', dropdown_1.DropdownMenu)
    ], Select.prototype, "_menu", void 0);
    __decorate([
        core_1.HostBinding('class.ui'),
        core_1.HostBinding('class.selection'),
        core_1.HostBinding('class.dropdown'), 
        __metadata('design:type', Object)
    ], Select.prototype, "searchClasses", void 0);
    __decorate([
        core_1.HostBinding('class.search'), 
        __metadata('design:type', Boolean)
    ], Select.prototype, "isSearchable", void 0);
    __decorate([
        core_1.HostBinding('class.multiple'), 
        __metadata('design:type', Boolean)
    ], Select.prototype, "allowMultiple", void 0);
    __decorate([
        core_1.HostBinding('class.loading'), 
        __metadata('design:type', Boolean)
    ], Select.prototype, "_loading", void 0);
    __decorate([
        core_1.HostBinding('class.active'), 
        __metadata('design:type', Boolean)
    ], Select.prototype, "isOpen", null);
    __decorate([
        core_1.HostListener('click', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [MouseEvent]), 
        __metadata('design:returntype', Boolean)
    ], Select.prototype, "click", null);
    Select = __decorate([
        core_1.Component({
            selector: 'sui-select',
            directives: [dropdown_1.DropdownMenu],
            inputs: ['placeholder', 'options', 'optionsField', 'isSearchable', 'searchDelay', 'isDisabled', 'allowMultiple', 'maxSelected'],
            outputs: ['selectedOptionChange'],
            host: {
                '[class.visible]': 'isOpen',
                '[class.disabled]': 'isDisabled'
            },
            template: "\n<i class=\"dropdown icon\"></i>\n<!-- Multi-select labels -->\n<a *ngFor=\"let selected of selectedOptions; let i = index\" class=\"ui label\" (click)=\"selectedOptionClick($event)\">\n    <content [innerHTML]=\"selectedOptionsHTML[i]\"></content>\n    <i class=\"delete icon\" (click)=\"deselectOption(selected); selectedOptionClick($event)\"></i>\n</a>\n<!-- Search input box -->\n<input *ngIf=\"isSearchable\" class=\"search\" type=\"text\" autocomplete=\"off\" [(ngModel)]=\"query\" (keydown)=\"searchKeyDown($event)\">\n<!-- Single-select label -->\n<div *ngIf=\"!selectedOption\" class=\"default text\" [class.filtered]=\"query\">{{ placeholder }}</div>\n<div *ngIf=\"selectedOption\" class=\"text\" [class.filtered]=\"query\" [innerHTML]=\"selectedOptionHTML\"></div>\n<!-- Select dropdown menu -->\n<div class=\"menu\" suiDropdownMenu>\n    <ng-content></ng-content>\n    <div *ngIf=\"!results.length && !maxSelectedReached\" class=\"message\">No Results</div>\n    <div *ngIf=\"!results.length && maxSelectedReached\" class=\"message\">Max {{ maxSelected }} selections</div>\n</div>\n",
            styles: [":host input.search { width: 12em !important; } .selected-results { display: none; }"]
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], Select);
    return Select;
})(search_1.Search);
exports.Select = Select;
var CUSTOM_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return SelectValueAccessor; }), multi: true });
var SelectValueAccessor = (function (_super) {
    __extends(SelectValueAccessor, _super);
    function SelectValueAccessor(host) {
        _super.call(this, host);
    }
    SelectValueAccessor = __decorate([
        core_1.Directive({
            selector: 'sui-select',
            host: { '(selectedOptionChange)': 'onChange($event)' },
            providers: [CUSTOM_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [Select])
    ], SelectValueAccessor);
    return SelectValueAccessor;
})(search_1.SearchValueAccessor);
exports.SelectValueAccessor = SelectValueAccessor;
//# sourceMappingURL=select.component.js.map