var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var dropdown_1 = require('../dropdown');
var Search = (function (_super) {
    __extends(Search, _super);
    function Search(el) {
        _super.call(this, el);
        this.searchClasses = true;
        this.placeholder = "Search...";
        this.searchDelay = 200;
        this.icon = true;
        this.selectedOptionChange = new core_1.EventEmitter(false);
        this.onItemSelected = new core_1.EventEmitter(false);
        this._options = [];
        this._allowEmptyQuery = false;
        this._query = "";
        this._results = [];
        this._resultsCache = {};
        this._loading = false;
        this._service.itemClass = "result";
        this._service.itemSelectedClass = "active";
    }
    Object.defineProperty(Search.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (value) {
            if (typeof (value) == "function") {
                this._optionsLookup = value;
                return;
            }
            this._options = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Search.prototype, "query", {
        get: function () {
            return this._query;
        },
        set: function (value) {
            var _this = this;
            this._query = value;
            clearTimeout(this._queryTimer);
            if (value || this._allowEmptyQuery) {
                this._queryTimer = setTimeout(function () {
                    _this.search(function () {
                        _this.isOpen = true;
                    });
                }, this.searchDelay);
                return;
            }
            if (!this._allowEmptyQuery) {
                this.isOpen = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Search.prototype, "results", {
        get: function () {
            return this._results;
        },
        enumerable: true,
        configurable: true
    });
    Search.prototype.search = function (callback) {
        var _this = this;
        this._loading = true;
        if (this._optionsLookup) {
            if (this._resultsCache[this._query]) {
                this._results = this._resultsCache[this._query];
                this._loading = false;
                if (callback) {
                    callback();
                }
                return;
            }
            this._optionsLookup(this._query).then(function (results) {
                _this._resultsCache[_this._query] = results;
                _this.search(callback);
            });
            return;
        }
        this._results = this.options.filter(function (o) { return _this.deepValue(o, _this.optionsField).toString().slice(0, _this.query.length).toLowerCase() == _this.query.toLowerCase(); });
        this._loading = false;
        if (callback) {
            callback();
        }
    };
    Search.prototype.result = function (i) {
        return this.deepValue(this._results[i], this.optionsField);
    };
    //noinspection JSMethodCanBeStatic
    Search.prototype.deepValue = function (object, path) {
        if (!object) {
            return;
        }
        if (!path) {
            return object;
        }
        for (var i = 0, p = path.split('.'), len = p.length; i < len; i++) {
            object = object[p[i]];
        }
        return object;
    };
    Search.prototype.select = function (result) {
        this.selectedOption = result;
        this.selectedOptionChange.emit(result);
        this.onItemSelected.emit(result);
        this._query = this.deepValue(result, this.optionsField);
        this.isOpen = false;
    };
    Search.prototype.writeValue = function (value) {
        this.selectedOption = value;
        this._query = this.deepValue(value, this.optionsField);
    };
    Search.prototype.ngAfterContentInit = function () {
        //Override this
        return;
    };
    Search.prototype.ngAfterViewInit = function () {
        this._menu.service = this._service;
    };
    Search.prototype.click = function (event) {
        var _this = this;
        event.stopPropagation();
        if (!this._service.menuElement.nativeElement.contains(event.target)) {
            if (!this.isOpen && this.query) {
                if (this.results.length) {
                    this.isOpen = true;
                }
                this._loading = true;
                this.search(function () {
                    _this.isOpen = true;
                    _this._loading = false;
                });
            }
        }
        return false;
    };
    __decorate([
        core_1.ViewChild(dropdown_1.DropdownMenu), 
        __metadata('design:type', dropdown_1.DropdownMenu)
    ], Search.prototype, "_menu", void 0);
    __decorate([
        core_1.HostBinding('class.ui'),
        core_1.HostBinding('class.search'), 
        __metadata('design:type', Object)
    ], Search.prototype, "searchClasses", void 0);
    __decorate([
        core_1.HostBinding('class.loading'), 
        __metadata('design:type', Boolean)
    ], Search.prototype, "_loading", void 0);
    __decorate([
        core_1.HostListener('click', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [MouseEvent]), 
        __metadata('design:returntype', Boolean)
    ], Search.prototype, "click", null);
    Search = __decorate([
        core_1.Component({
            selector: 'sui-search',
            directives: [dropdown_1.DropdownMenu],
            inputs: ['placeholder', 'options', 'optionsField', 'searchDelay', 'icon'],
            outputs: ['selectedOptionChange', 'onItemSelected'],
            host: {
                '[class.visible]': 'isOpen',
                '[class.disabled]': 'isDisabled'
            },
            template: "\n<div class=\"ui icon input\">\n    <input class=\"prompt\" type=\"text\" [attr.placeholder]=\"placeholder\" autocomplete=\"off\" [(ngModel)]=\"query\">\n    <i *ngIf=\"icon\" class=\"search icon\"></i>\n  </div>\n<div class=\"results\" suiDropdownMenu>\n    <a class=\"result\" *ngFor=\"let r of results; let i = index\" (click)=\"select(r)\">\n        <div class=\"title\">{{ result(i) }}</div>\n    </a>\n    <div *ngIf=\"!results.length\" class=\"message empty\">\n        <div class=\"header\">No Results</div>\n        <div class=\"description\">Your search returned no results.</div>\n    </div>\n</div>\n"
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], Search);
    return Search;
})(dropdown_1.Dropdown);
exports.Search = Search;
var CUSTOM_VALUE_ACCESSOR = new core_1.Provider(common_1.NG_VALUE_ACCESSOR, { useExisting: core_1.forwardRef(function () { return SearchValueAccessor; }), multi: true });
var SearchValueAccessor = (function () {
    function SearchValueAccessor(host) {
        this.onChange = function () { };
        this.onTouched = function () { };
        this.host = host;
    }
    SearchValueAccessor.prototype.writeValue = function (value) {
        this.host.writeValue(value);
    };
    SearchValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    SearchValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    SearchValueAccessor = __decorate([
        core_1.Directive({
            selector: 'sui-search',
            host: { '(selectedOptionChange)': 'onChange($event)' },
            providers: [CUSTOM_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [Search])
    ], SearchValueAccessor);
    return SearchValueAccessor;
})();
exports.SearchValueAccessor = SearchValueAccessor;
//# sourceMappingURL=search.component.js.map