var core_1 = require('@angular/core');
var dropdown_service_1 = require('./dropdown.service');
var dropdown_menu_directive_1 = require('./dropdown-menu.directive');
var Dropdown = (function () {
    function Dropdown(el) {
        this._service = new dropdown_service_1.DropdownService();
        this._service.dropdownElement = el;
    }
    Object.defineProperty(Dropdown.prototype, "isOpen", {
        get: function () {
            return this._service.isOpen;
        },
        set: function (value) {
            this._service.isOpen = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dropdown.prototype, "autoClose", {
        get: function () {
            return this._service.autoClose;
        },
        set: function (value) {
            this._service.autoClose = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dropdown.prototype, "onToggle", {
        get: function () {
            return this._service.onToggle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dropdown.prototype, "isOpenChange", {
        get: function () {
            return this._service.isOpenChange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dropdown.prototype, "isDisabled", {
        get: function () {
            return this._service.isDisabled;
        },
        set: function (value) {
            this._service.isDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Dropdown.prototype.ngAfterContentInit = function () {
        this._menu.service = this._service;
    };
    Dropdown.prototype.click = function (event) {
        event.stopPropagation();
        if (!this._service.menuElement.nativeElement.contains(event.target)) {
            this._service.toggle();
        }
        return false;
    };
    __decorate([
        core_1.ContentChild(dropdown_menu_directive_1.DropdownMenu), 
        __metadata('design:type', dropdown_menu_directive_1.DropdownMenu)
    ], Dropdown.prototype, "_menu", void 0);
    __decorate([
        core_1.HostBinding('class.visible'),
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Dropdown.prototype, "isOpen", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Dropdown.prototype, "autoClose", null);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], Dropdown.prototype, "onToggle", null);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], Dropdown.prototype, "isOpenChange", null);
    __decorate([
        core_1.HostBinding('class.disabled'),
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Dropdown.prototype, "isDisabled", null);
    __decorate([
        core_1.HostListener('click', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [MouseEvent]), 
        __metadata('design:returntype', Boolean)
    ], Dropdown.prototype, "click", null);
    Dropdown = __decorate([
        core_1.Directive({
            selector: '[suiDropdown]'
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], Dropdown);
    return Dropdown;
})();
exports.Dropdown = Dropdown;
//# sourceMappingURL=dropdown.directive.js.map