var core_1 = require('@angular/core');
var Progress = (function () {
    function Progress() {
        this.classes = true;
        this._value = 0;
        this.unscaledValue = 0;
        this._maximum = 100;
        this.autoSuccess = true;
        this.progress = true;
        this.precision = 0;
    }
    Object.defineProperty(Progress.prototype, "reachedMaximum", {
        get: function () {
            return this.value == this.maximum && this.autoSuccess;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Progress.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            value = parseFloat(value);
            if (Number.isNaN(value)) {
                return;
            }
            value = Math.max(value, 0);
            //Keep this for when maximum changes
            this.unscaledValue = value;
            value = Math.min(value, this.maximum);
            this._value = parseFloat((value / this.maximum * 100).toFixed(Math.min(20, Math.max(this.precision, 0))));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Progress.prototype, "maximum", {
        get: function () {
            return this._maximum;
        },
        set: function (value) {
            value = parseFloat(value);
            if (Number.isNaN(value)) {
                return;
            }
            value = Math.max(value, 0);
            this._maximum = value;
            this.value = this.unscaledValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Progress.prototype, "percentage", {
        get: function () {
            return this._value.toString();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Progress.prototype, "classValue", {
        set: function (value) {
            if (value.includes("attached") || value.includes("tiny")) {
                this.progress = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.HostBinding('class.ui'),
        core_1.HostBinding('class.progress'), 
        __metadata('design:type', Object)
    ], Progress.prototype, "classes", void 0);
    __decorate([
        core_1.HostBinding('class.success'), 
        __metadata('design:type', Object)
    ], Progress.prototype, "reachedMaximum", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Progress.prototype, "autoSuccess", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Progress.prototype, "progress", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number)
    ], Progress.prototype, "precision", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], Progress.prototype, "value", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], Progress.prototype, "maximum", null);
    __decorate([
        core_1.HostBinding('attr.data-percent'), 
        __metadata('design:type', String)
    ], Progress.prototype, "percentage", null);
    __decorate([
        core_1.Input('class'), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], Progress.prototype, "classValue", null);
    Progress = __decorate([
        core_1.Component({
            selector: 'sui-progress',
            directives: [],
            template: "\n<div class=\"bar\" [style.width.%]=\"percentage\">\n    <div class=\"progress\" *ngIf=\"progress\">{{ percentage }}%</div>\n</div>\n<div class=\"label\">\n    <ng-content></ng-content>\n</div>\n",
            styles: [".bar { transition-duration: 300ms !important; }"]
        }), 
        __metadata('design:paramtypes', [])
    ], Progress);
    return Progress;
})();
exports.Progress = Progress;
//# sourceMappingURL=progress.component.js.map