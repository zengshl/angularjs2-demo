var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var DropdownComponent = (function () {
    function DropdownComponent(vm) {
        this.placeHolder = "";
        this.multiple = false;
        this.active = false;
        this.vm = vm;
        vm.valueAccessor = this;
        this.id = "lsu_dropdown_" + Math.random();
    }
    DropdownComponent.prototype.writeValue = function (value) {
        this.selectedItem = value;
    };
    DropdownComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    DropdownComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    DropdownComponent.prototype.ngOnInit = function () {
        if (this.multiple) {
            this.selectedItem = this.selectedItem || [];
            for (var i = 0; i < this.selectedItem.length; i++) {
                var initItem = this.selectedItem[i];
                for (var j = 0; j < this.data.length; j++) {
                    var candidateItem = this.data[j];
                    if (JSON.stringify(initItem) === JSON.stringify(candidateItem)) {
                        this.selectedItem[i] = this.data[j];
                        break;
                    }
                }
            }
        }
    };
    DropdownComponent.prototype.onDocumentClick = function (event) {
        var id = event.target.id;
        if (this.active && id !== this.id && id !== this.id + "_1") {
            this.active = false;
        }
    };
    DropdownComponent.prototype.toggleSelectPanel = function (event) {
        this.active = !this.active;
        if (event) {
        }
    };
    DropdownComponent.prototype.isSelected = function (item) {
        if (!this.selectedItem) {
            return false;
        }
        if (this.multiple) {
            var index = this.selectedItem.indexOf(item);
            return index !== -1;
        }
        else {
            return this.selectedItem === item;
        }
    };
    DropdownComponent.prototype.itemClick = function (item, event) {
        var value;
        if (this.multiple) {
            value = this.selectedItem || [];
            value.push(item);
            if (value.length === this.data.length) {
                this.toggleSelectPanel();
            }
        }
        else {
            value = item;
            this.toggleSelectPanel();
        }
        this.writeValue(value);
        this.vm.viewToModelUpdate(value);
        event.stopPropagation();
    };
    DropdownComponent.prototype.removeItem = function (item, event) {
        var value = this.selectedItem;
        var index = value.indexOf(item);
        if (index !== -1) {
            value.splice(index, 1);
        }
        this.writeValue(value);
        this.vm.viewToModelUpdate(value);
        event.stopPropagation();
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Array)
    ], DropdownComponent.prototype, "data", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DropdownComponent.prototype, "textField", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DropdownComponent.prototype, "placeHolder", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], DropdownComponent.prototype, "multiple", void 0);
    DropdownComponent = __decorate([
        core_1.Component({
            selector: 'lsu-dropdown',
            styles: [".active{ display:block !important; }"],
            host: {
                '(document:click)': 'onDocumentClick($event)'
            },
            template: "\n    <div class=\"ui fluid selection dropdown\" [attr.id]=\"id\" \n      [ngClass]=\"{'active':active,'visible':active,'multiple':multiple}\" \n      (click)=\"toggleSelectPanel($event)\">\n      <i class=\"dropdown icon\"></i>\n      <div class=\"default text\" *ngIf=\"!selectedItem || selectedItem.length == 0\">\n        {{ placeHolder }}\n      </div>\n      <div class=\"text\" *ngIf=\" selectedItem && !multiple \">\n        {{ selectedItem[textField] || selectedItem }}\n      </div>\n      <div *ngIf=\"selectedItem && multiple\"  [attr.id]=\"id+'_1'\">\n        <a class=\"ui label transition visible\" style=\"display: inline-block !important;\" *ngFor=\"let item of selectedItem\">\n          {{ item[textField] || item }}\n          <i class=\"delete icon\" (click)=\"removeItem(item, $event)\"></i>\n        </a>\n      </div>\n      <div class=\"menu transition hidden\" [class.hidden]=\"!active\" [class.visible]=\"active\">\n        <div class=\"item\" [class.active]=\"isSelected(item)\" [class.filtered]=\"isSelected(item) && multiple\" (click)=\"itemClick(item, $event)\" *ngFor=\"let item of data\">\n          {{ item[textField] || item }}\n        </div>\n      </div>\n    </div>\n  "
        }), 
        __metadata('design:paramtypes', [common_1.NgModel])
    ], DropdownComponent);
    return DropdownComponent;
})();
exports.DropdownComponent = DropdownComponent;
//# sourceMappingURL=dropdown.js.map